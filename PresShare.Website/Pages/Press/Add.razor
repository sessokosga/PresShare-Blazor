@page "/press/add"

@inject PressProcessor pressProcess
@inject NavigationManager NavManager
@attribute [Authorize]

        @if (adding)
        {
            <p>Addind...</p>
        }
        else
        {
            @if (press == null)
            {
                <p>Posting press...</p>
            }
            else
            {
                <div id="add-press" class="add-press">
                    <h2>Add a Press </h2>
                    <EditForm class="form-press" Model="@press" OnValidSubmit="@Save" Context="formContext">
                        <div class="form-press-left">
                            <InputText id="title" minlength="1" maxlength="25" required placeholder="" type="text"
                        @bind-Value="@press.title"></InputText>
                            <InputTextArea minlength="2" required cols="30" rows="5" id="content" @bind-Value="@press.content"
                                placeholder="Contenu du Press"></InputTextArea>
                        </div>
                        <div class="form-press-right">
                            <InputSelect id="genre" @bind-Value="@press.genre">
                                <option value="Text">Texte</option>
                                <option value="Link">Lien</option>
                            </InputSelect>
                            <br />
                            <input class="del-add" type="reset" value="Reset">
                            <input class="del-add" type="submit" value="Save">
                        </div>
                    </EditForm>
                </div>
            }
        }
    


@code {
    [Parameter]
    public int id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private bool isAuthorized = false;
    private PressModel? press = null;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            press = new PressModel();
            isAuthorized = true;
            press.author_id = int.Parse(authState.User.FindFirst(ClaimTypes.NameIdentifier).Value);
            press.genre = "Text";
        }



    }
    private bool adding = false;

    private async Task Save()
    {
        if (isAuthorized)
        {
            adding = true;
            press.content = press.content.Trim();
            if (await pressProcess.Add(press))
            {
                NavManager.NavigateTo("/");
            }
        }
    }
}
