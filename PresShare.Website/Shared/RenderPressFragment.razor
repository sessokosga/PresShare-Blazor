@using PresShare.DataModel.Lib
@using PresShare.Website.Api

@inject PressProcessor pressProcess

<div class="parent-press ">
    @if (presses == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (PressModel press in presses)
        {
            if (Delequeue.Contains(press.id)){
                <p>Deleting...</p>
            }else{
                <div class="press @press.genre.ToLower() ">
                    <b> @press.title </b>
                    @if(canEdit){
                        <a class="edit" href= "press/update/@press.id" title= "Editer "><img src= "svg/edit.svg" alt= "Editer "></a>
                        var id = press.id;
                        <a href= "press/delete/@press.id" @onclick:preventDefault @onclick="@( ()=>Delete(press.id) )" type="button" title= "Supprimer" ><img src= "svg/trash-alt.svg" alt= "Supprimer "></a>
                    }


                    <br><small>@press.created_at.ToShortDateString()</small>
                    <a class="genre" href="press/@press.genre.ToLower()s">@press.genre.ToLower()</a>
                    @if (press.genre == "Link")
                    {
                        <p>
                        <a href="@((MarkupString) press.content.Replace("\n", "<br>")) ">@((MarkupString) press.content.Replace("\n", "<br>"))</a>
                        </p>
                    }
                    else
                    {
                        <p> @((MarkupString) press.content.Replace("\n", "<br>"))</p>
                        
                    }
                </div>
            }
;
        }
    }
</div> 
@code {
    [Parameter]
    public List<PressModel>? presses { get; set; }
    private bool canEdit = true;
    private int deleteID;
    private List<int> Delequeue = new List<int>();
    

    public async void Delete(int id){
            Delequeue.Add(id);
        if(await pressProcess.DeletePress(id) == true){
            presses.RemoveAt(id);
        }
    }
}