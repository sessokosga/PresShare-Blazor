@using PresShare.DataModel.Lib
@using PresShare.Website.Api

@inject PressProcessor pressProcess
@inject NavigationManager NavManager

<div class="parent-press ">
    @if (presses == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (PressModel press in presses)
        {
            <div class="press @press.genre.ToLower() ">
                @if (Delequeue.Contains(press.id)){
                    <p>Deleting...</p>
                }else{
                    <b> @press.title</b>
                    @if(authorID == press.author_id.ToString()){
                        <a class="edit" href= "press/update/@press.id" title= "Editer "><img src= "svg/edit.svg" alt= "Editer "></a>
                        var id = press.id;
                        <a href= "#" @onclick:preventDefault @onclick="@( ()=>Delete(press) )" type="button" title= "Supprimer" ><img src= "svg/trash-alt.svg" alt= "Supprimer "></a>
                    }


                    <br><small>@press.created_at.ToShortDateString()</small>
                    <a class="genre" href="press/@press.genre.ToLower()s">@press.genre.ToLower()</a>
                    @if (press.genre == "Link")
                    {
                        <p>
                        <a href="@((MarkupString) press.content.Replace("\n", "<br>")) ">@((MarkupString) press.content.Replace("\n", "<br>"))</a>
                        </p>
                    }
                    else
                    {
                        <p> @((MarkupString) press.content.Replace("\n", "<br>"))</p>
                    }
                }
            </div>
        }
    }
</div> 
@code {
    [Parameter]
    public List<PressModel>? presses { get; set; }
        [CascadingParameter]
        public Task<AuthenticationState> AuthState {get;set;}
    private bool canEdit = false;
    private string authorID="";
    private List<int> Delequeue = new List<int>();
    
    private List<Task<int>> DeleteTasks = new List<Task<int>>();

    public async void Delete(PressModel p){
        if (p.author_id.ToString() == authorID){
            Delequeue.Add(p.id);
            DeleteTasks.Add(pressProcess.DeletePress(p.id));
            while(DeleteTasks.Any()){
                Task<int> finishedTask = await Task.WhenAny(DeleteTasks);
                DeleteTasks.Remove(finishedTask);
                var id = await finishedTask;
                if (id>0){
                    NavManager.NavigateTo(NavManager.Uri,true);
                }
            }
        }
    }

    protected override async Task OnInitializedAsync(){
        var authState = await AuthState;
        if(authState.User.Identity.IsAuthenticated){
            authorID = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;            
        }
    }
}